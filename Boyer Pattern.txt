class last_occurrence(object):
def __init__(self, pattern, alphabet):
self.occurrences = dict()
for letter in alphabet :
self.occurrences[letter] = pattern.rfind(letter)
def __call__(self, letter):
return self.occurrences[letter]

def boyer_moore_match(text, pattern):
alphabet = set(text)
last = last_occurrence(pattern, alphabet)
m = len(pattern)
n = len ( text )
i = m - 1 # text index
j = m - 1 # pattern index
while i &lt; n:
if text[i] == pattern[j]:
if j == 0 :
return i
else:
i -= 1
j -= 1
else:
l = last(text[i])
i = i + m - min ( j , 1 + l )
j = m - 1
return -1

### TEST FUNCTION ###
if __name__ == &#39;__main__&#39;:
def show_match(text, pattern):
print (&#39;Text: %s&#39; % text)

pattern = boyer_moore_match(text, pattern)
print ( &#39;Match: %s%s&#39; % (&#39;.&#39;*pattern, pattern))
text = &#39;BVRITHYDERABAD COLLEGE OF ENGINEERING FOR WOMEN&#39;
pattern = &#39;FOR&#39;
show_match(text, pattern)
show_match(text, pattern + &#39;e&#39;)